# Docker wrapper configuration file

### CONTAINER CONFIGURATION ###

# The name of the container
name=sample

# A one line description
description="A sample docker container"

# The image label. If left blank, the container name is used
image=

# Volume options. Passed directly to `docker create`
# volumes="-v /etc/localtime:/etc/localtime:ro -v /opt/config/$name:/config -v /data:/data"
volumes="-v /etc/localtime:/etc/localtime:ro \
-v /opt/config/$name:/config \
-v /data:/data"

# Type of network setup
# Options are:
# - (blank): Defaults to bridge
# - bridge: Use a docker bridge network
# - pipework: Create the container without networking, then use pipework to
#             give the container an interface and IP address on the host's
#             network adapter using macvlan
nettype=

# IP address to bind to the container
# - If `nettype=bridge`, use this host IP address to publish ports. If the host
#   doesn't have the IP address configured, then it will be added. Specify in
#   CIDR format.
#   localip="192.168.0.89/24"
# - If `nettype=pipework`, give the container this IP address on the host's
#   local network using a macvlan interface. Use the format below.
#   localip="192.168.0.89/24@192.168.0.1"
localip=

# Host adapter to bind the container to if `nettype=pipework`. If unspecified,
# a guess is made
# adapter=eth0
adapter=

# The name of the docker network to connect to. It will be created if it doesn't
# already exist. Defaults to `bridge`
# network=netname
network=

# The subnet of the docker network, in CIDR format
# subnet="172.20.0.0/16"
subnet=

# IP ports to wire from container to host, using same port number on each side
# Specify ports in one of these formats
# - Port numbers optionally followed by "/udp", separated by space, e.g.:
#   ports="80 443 53/udp"
# - Host port, ":", container port, e.g.:
#   ports="80:8080 443:8443 8053:53/udp"
# - docker publish syntax, e.g.:
#   ports="-p $localip:80:8080 -p $localip:443:8443 -p $localip:8053:53/udp"
ports=

# Additional options to pass to `docker create`
# options="--log-opt max-size=10m"
options="--log-opt max-size=10m"

# Adds a systemd unit as a service dependency when running `install` to install
# the container as a system service
# depends=other_container
depends=

### OVERRIDE FUNCTIONS ###
